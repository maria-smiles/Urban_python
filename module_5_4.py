class House:
    houses_history = []

    def __new__(cls, *args):
        cls.houses_history.append(args[0])
        return object.__new__(cls)

    def __init__(self, name, number_of_floors):
        self.name = name
        self.number_of_floors = number_of_floors

    def go_to(self, new_floor):
        new_floor = new_floor
        if new_floor > self.number_of_floors:
            print('Такого этажа не существует')
        else:
            for i in range(1, new_floor+1):
                print(i)

    def __len__(self):
        return self.number_of_floors

    def __str__(self):
        return f'Название: {self.name}, кол-во этажей: {len(self)}'

    def __eq__(self, other):
        if isinstance(other, House):
            return self.number_of_floors == other.number_of_floors
        else:
            return type(other)

    def __lt__(self, other): # <
        if isinstance(other, House):
            return self.number_of_floors < other.number_of_floors
        else:
            return "Используйте этот метод для объектов класса House"

    def __le__(self, other): # <=
        if isinstance(other, House):
            return self.number_of_floors <= other.number_of_floors
        else:
            return "Используйте этот метод для объектов класса House"

    def __gt__(self, other): # >
        if isinstance(other, House):
            return self.number_of_floors > other.number_of_floors
        else:
            return "Используйте этот метод для объектов класса House"

    def __ge__(self, other): # >=
        if isinstance(other, House):
            return self.number_of_floors >= other.number_of_floors
        else:
            return "Используйте этот метод для объектов класса House"

    def __ne__(self, other): # !=
        if isinstance(other, House):
            return self.number_of_floors != other.number_of_floors
        else:
            return "Используйте этот метод для объектов класса House"


    def __add__(self, value: int):
        if isinstance(value, int):
            self.number_of_floors += value
            return self
        else:
            return "Используйте этот метод для целых чисел"


    def __radd__(self, value):
        if isinstance(value, int):
            self.number_of_floors += value
            return self
        else:
            return "Используйте этот метод для целых чисел"
    def __iadd__(self, value):
        if isinstance(value, int):
            self.number_of_floors += value
            return self
        else:
            return "Используйте этот метод для целых чисел"

    def __del__(self):
        print(f'{self.name} снесён, но он останется в истории')




h1 = House('ЖК Эльбрус', 10)

print(House.houses_history)

h2 = House('ЖК Акация', 20)

print(House.houses_history)

h3 = House('ЖК Матрёшки', 20)

print(House.houses_history)


print('\nУдаление объектов\n')


del h2

del h3



print(House.houses_history)